LINT_EXPLANATIONS = {
    # Python (flake8, pylint, pycodestyle, etc.)
    "F401": "Unused import detected. You have imported a module or variable but it is not used in your code. Remove unused imports to keep code clean.",
    "E302": "Expected 2 blank lines before function or class definitions according to PEP 8 style guide.",
    "E305": "Expected 2 blank lines after function or class definitions according to PEP 8 style guide.",
    "E111": "Indentation is not a multiple of four. Python relies on consistent indentation (usually 4 spaces per level).",
    "E225": "Missing whitespace around operator. For clarity and readability, put spaces around operators like =, +, -, etc.",
    "E222": "Multiple spaces after operator. Use only a single space for clarity.",
    "E221": "Multiple spaces before operator. Use only a single space for clarity.",
    "E201": "Whitespace after '('. Remove any spaces directly after an opening parenthesis.",
    "E202": "Whitespace before ')'. Remove any spaces directly before a closing parenthesis.",
    "E203": "Whitespace before ':'. Remove any spaces before colons.",
    "E231": "Missing whitespace after ','. Put a space after commas.",
    "E251": "Unexpected spaces around keyword/parameter equals. Do not use spaces around '=' when used to indicate a keyword argument.",
    "E265": "Block comment should start with '# '. Add a space after the hash in comments.",
    "E271": "Multiple spaces after keyword. Use only a single space after keywords.",
    "E272": "Multiple spaces before keyword. Use only a single space before keywords.",
    "E301": "Expected 1 blank line, found 0. Add a blank line before class or function definitions.",
    "E303": "Too many blank lines. Reduce the number of consecutive blank lines.",
    "E304": "Blank lines found after function decorator. Remove blank lines after decorators.",
    "E306": "Expected 1 blank line before a nested definition.",
    "E501": "Line too long. Break it into multiple lines to improve readability.",
    "E502": "The backslash is used as a line continuation character, but is redundant.",
    "E703": "Statement ends with a semicolon. Remove unnecessary semicolons.",
    "E713": "Test for membership should be 'not in'.",
    "E714": "Test for object identity should be 'is not'.",
    "E999": "Syntax error detected. Check your code for typos or missing characters.",
    "W291": "Trailing whitespace found at the end of the line. Remove it to clean up your code.",
    "W292": "No newline at end of file. Add a newline for compatibility with some tools.",
    "W293": "Blank line contains whitespace. Remove spaces or tabs on otherwise blank lines.",
    "C0303": "Trailing whitespace detected. Remove unnecessary spaces at the end of lines.",
    "C0304": "Final newline missing. Add a newline at the end of your file.",
    "C0301": "Line too long. Break it into multiple lines to improve readability.",
    "W0311": "Bad indentation detected. Make sure your indentation matches Python conventions (usually 4 spaces).",
    "C0114": "Missing module docstring. Add a docstring at the top of your file to describe its purpose.",
    "C0115": "Missing class docstring. Add a docstring to your class definition to describe its purpose.",
    "C0116": "Missing function or method docstring. Add a docstring to each function and method to describe its behavior.",
    "C0103": "Naming convention not followed. Use snake_case for functions/variables, UPPER_CASE for constants.",
    "W0611": "Unused import detected. Remove imports that aren’t used in your code.",
    "W0621": "Redefining name from outer scope. Use unique variable names to avoid confusion.",
    "E0602": "Undefined variable. You are using a variable that has not been defined.",
    "E0601": "Using variable before assignment. Assign a value before using the variable.",
    "E1120": "Missing required positional argument in function call.",
    "E1121": "Too many positional arguments in function call.",
    "E1136": "Value assigned to a variable is not iterable.",
    "W0622": "Redefining built-in name. Avoid using Python built-in names for variables or functions.",
    "W0612": "Unused variable. Remove unused variables to keep code clean.",
    "W0401": "Wildcard import detected. Avoid using 'from module import *', import only what you need.",
    "W0613": "Unused function argument. Remove unused arguments from function definitions.",
    "E1101": "Module has no member. Check for typos or missing imports.",
    "E0401": "Unable to import module. Check the module path and installation.",
    "E1003": "Bad super call. Use correct syntax for super().",
    "R0903": "Too few public methods in class.",
    "R0902": "Too many instance attributes.",
    "R0913": "Too many arguments in function/method.",
    "R0914": "Too many local variables.",
    "R0915": "Too many statements in function/method.",
    "R1705": "Unnecessary 'else' after 'return'. Remove 'else' after 'return' for clarity.",
    "R1701": "Consider merging 'isinstance' calls.",
    "R1710": "Either all return statements in a function should return a value, or none of them should.",
    "R1711": "Useless return at end of function or method. Remove unnecessary returns.",
    "R1707": "Disallow unnecessary 'pass' statement.",
    "R1702": "Too many nested blocks.",
    "C0411": "Standard import should be placed before third party imports.",
    # Add more as needed for flake8/pylint/pycodestyle

    # JavaScript / ESLint rules
    "no-var": "Unexpected 'var', use 'let' or 'const' instead. Modern JavaScript prefers block-scoped variables.",
    "semi": "Missing semicolon. Statements in JavaScript should end with a semicolon to avoid potential bugs.",
    "no-console": "Unexpected console statement. Avoid leaving console.log or similar statements in production code.",
    "space-before-function-paren": "Missing space before function parentheses. Use a space between 'function' and '(' for consistency.",
    "quotes": "Strings must use consistent quotes (either single or double) as per your project's style guide.",
    "eqeqeq": "Expected '===' and instead saw '=='. Use strict equality to avoid unexpected type coercion.",
    "curly": "Expected { after control statements. Always use curly braces for clarity and safety.",
    "no-unused-vars": "Variable is defined but never used. Remove unused variables to keep code clean.",
    "indent": "Incorrect indentation. Use spaces or tabs as per your project’s style guide.",
    "no-undef": "Variable is not defined. Make sure all variables are declared before use.",
    "prefer-const": "Use 'const' when a variable is never reassigned.",
    "no-extra-semi": "Unnecessary semicolon. Remove extra semicolons from code.",
    "brace-style": "Enforce consistent brace style for blocks.",
    "no-mixed-spaces-and-tabs": "Mixed spaces and tabs. Use only spaces or only tabs for indentation.",
    "key-spacing": "Inconsistent spacing between keys and values in object literals.",
    "comma-dangle": "Missing or unexpected trailing comma in object or array.",
    "object-curly-spacing": "Inconsistent spacing inside curly braces.",
    "array-bracket-spacing": "Inconsistent spacing inside array brackets.",
    "no-trailing-spaces": "Trailing spaces not allowed. Remove spaces at the end of lines.",
    "spaced-comment": "Incorrect spacing after comment marker.",
    "no-multiple-empty-lines": "Too many blank lines. Use a maximum of one consecutive blank line.",
    "func-call-spacing": "Unexpected space between function name and its call.",
    "camelcase": "Identifier name is not in camelCase.",
    "no-empty": "Empty block statement found.",
    # Add more as needed for ESLint

    # TypeScript (TSLint, ESLint for TS)
    "typedef": "Missing type annotation. TypeScript code should specify variable and parameter types.",
    "no-explicit-any": "Unexpected 'any' type. Avoid using 'any' to retain type safety.",
    "no-inferrable-types": "Type is trivially inferred, remove explicit type annotation.",
    "no-unused-vars-ts": "Unused variable detected. Remove variables that are declared but never used.",
    "no-implicit-any": "Implicit 'any' type detected. Specify a type for the variable.",
    "TS2322": "Type error: Type is not assignable. You are trying to assign a value of a different type than expected.",
    "TS7006": "Parameter implicitly has an 'any' type. Provide a type annotation.",
    "TS2339": "Property does not exist on type. Check for typos or missing declarations.",
    "TS2551": "Property does not exist on type. Did you mean another property?",
    "TS2304": "Cannot find name. The identifier is not defined.",
    "TS6133": "Variable is declared but its value is never read.",
    "TS2345": "Argument of type is not assignable to parameter of type.",
    "TS2307": "Cannot find module. Check your import path and module existence.",
    # Add more as needed for TypeScript

    # C (gcc, clang)
    "warning: assignment makes integer from pointer without a cast": "You are assigning a pointer (such as a string literal) to an integer variable. Use the correct type or perform a cast if intended.",
    "error: expected ';' before": "Missing semicolon. Statements in C must end with a semicolon.",
    "error: incompatible types": "Type mismatch between variable and assigned value.",
    "error: stray '\\342'": "Stray character in source file, possibly from copy-paste or encoding issue.",
    "error: conflicting types": "Conflicting type declarations for the same identifier.",
    "error: 'return' with a value, in function returning void": "Cannot return a value from a function declared as void.",
    "warning: unused variable": "Unused variable. Remove unused variables to keep code clean.",
    "error: too few arguments to function": "Not enough arguments supplied to the function call.",
    "error: too many arguments to function": "Too many arguments supplied to the function call.",
    # Add more as needed for gcc/clang

    # Java (javac)
    "incompatible types": "Type error: The value assigned to a variable is not compatible with its declared type.",
    "missing return statement": "A method that should return a value does not have a return statement in all code paths.",
    "cannot find symbol": "You are using a variable or method name that has not been declared.",
    "missing semicolon": "Missing semicolon. Java statements must end with a semicolon.",
    "unclosed string literal": "A string literal is not closed with a double quote.",
    "class, interface, or enum expected": "Your code is outside a class, interface, or enum declaration.",
    "illegal start of type": "Illegal type declaration. Check for syntax errors.",
    "variable might not have been initialized": "A variable is used before it is assigned a value.",
    "method does not override or implement a method from a supertype": "Check the method signature and ensure it matches the supertype.",
    "package does not exist": "A referenced package is missing or misspelled.",
    # Add more as needed for javac

    # General
    "syntax error": "There is a syntax error in your code. Check for missing characters, punctuation, or unmatched parentheses.",
    "type error": "There is a type mismatch in your assignment or operation.",
    "unused variable": "A variable is declared but never used. Remove it to clean up your code.",
    "parse error": "There was a parsing error. Check your code for proper syntax.",
    "unreachable code": "Some code can never be executed. Check the program flow.",
}